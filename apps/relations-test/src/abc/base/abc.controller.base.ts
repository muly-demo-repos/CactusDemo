/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AbcService } from "../abc.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AbcCreateInput } from "./AbcCreateInput";
import { Abc } from "./Abc";
import { AbcFindManyArgs } from "./AbcFindManyArgs";
import { AbcWhereUniqueInput } from "./AbcWhereUniqueInput";
import { AbcUpdateInput } from "./AbcUpdateInput";
import { DefFindManyArgs } from "../../def/base/DefFindManyArgs";
import { Def } from "../../def/base/Def";
import { DefWhereUniqueInput } from "../../def/base/DefWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AbcControllerBase {
  constructor(
    protected readonly service: AbcService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Abc })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createAbc(@common.Body() data: AbcCreateInput): Promise<Abc> {
    return await this.service.createAbc({
      data: {
        ...data,

        def: data.def
          ? {
              connect: data.def,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        def: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Abc] })
  @ApiNestedQuery(AbcFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async abcs(@common.Req() request: Request): Promise<Abc[]> {
    const args = plainToClass(AbcFindManyArgs, request.query);
    return this.service.abcs({
      ...args,
      select: {
        createdAt: true,

        def: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Abc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async abc(@common.Param() params: AbcWhereUniqueInput): Promise<Abc | null> {
    const result = await this.service.abc({
      where: params,
      select: {
        createdAt: true,

        def: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Abc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateAbc(
    @common.Param() params: AbcWhereUniqueInput,
    @common.Body() data: AbcUpdateInput
  ): Promise<Abc | null> {
    try {
      return await this.service.updateAbc({
        where: params,
        data: {
          ...data,

          def: data.def
            ? {
                connect: data.def,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          def: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Abc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAbc(
    @common.Param() params: AbcWhereUniqueInput
  ): Promise<Abc | null> {
    try {
      return await this.service.deleteAbc({
        where: params,
        select: {
          createdAt: true,

          def: {
            select: {
              id: true,
            },
          },

          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/defs")
  @ApiNestedQuery(DefFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  async findDefs(
    @common.Req() request: Request,
    @common.Param() params: AbcWhereUniqueInput
  ): Promise<Def[]> {
    const query = plainToClass(DefFindManyArgs, request.query);
    const results = await this.service.findDefs(params.id, {
      ...query,
      select: {
        abc: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/defs")
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "update",
    possession: "any",
  })
  async connectDefs(
    @common.Param() params: AbcWhereUniqueInput,
    @common.Body() body: DefWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defs: {
        connect: body,
      },
    };
    await this.service.updateAbc({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/defs")
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "update",
    possession: "any",
  })
  async updateDefs(
    @common.Param() params: AbcWhereUniqueInput,
    @common.Body() body: DefWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defs: {
        set: body,
      },
    };
    await this.service.updateAbc({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/defs")
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "update",
    possession: "any",
  })
  async disconnectDefs(
    @common.Param() params: AbcWhereUniqueInput,
    @common.Body() body: DefWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      defs: {
        disconnect: body,
      },
    };
    await this.service.updateAbc({
      where: params,
      data,
      select: { id: true },
    });
  }
}
