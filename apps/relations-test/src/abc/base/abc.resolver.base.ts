/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Abc } from "./Abc";
import { AbcCountArgs } from "./AbcCountArgs";
import { AbcFindManyArgs } from "./AbcFindManyArgs";
import { AbcFindUniqueArgs } from "./AbcFindUniqueArgs";
import { CreateAbcArgs } from "./CreateAbcArgs";
import { UpdateAbcArgs } from "./UpdateAbcArgs";
import { DeleteAbcArgs } from "./DeleteAbcArgs";
import { DefFindManyArgs } from "../../def/base/DefFindManyArgs";
import { Def } from "../../def/base/Def";
import { AbcService } from "../abc.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Abc)
export class AbcResolverBase {
  constructor(
    protected readonly service: AbcService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  async _abcsMeta(
    @graphql.Args() args: AbcCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Abc])
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  async abcs(@graphql.Args() args: AbcFindManyArgs): Promise<Abc[]> {
    return this.service.abcs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Abc, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "own",
  })
  async abc(@graphql.Args() args: AbcFindUniqueArgs): Promise<Abc | null> {
    const result = await this.service.abc(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Abc)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "create",
    possession: "any",
  })
  async createAbc(@graphql.Args() args: CreateAbcArgs): Promise<Abc> {
    return await this.service.createAbc({
      ...args,
      data: {
        ...args.data,

        def: args.data.def
          ? {
              connect: args.data.def,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Abc)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "update",
    possession: "any",
  })
  async updateAbc(@graphql.Args() args: UpdateAbcArgs): Promise<Abc | null> {
    try {
      return await this.service.updateAbc({
        ...args,
        data: {
          ...args.data,

          def: args.data.def
            ? {
                connect: args.data.def,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Abc)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "delete",
    possession: "any",
  })
  async deleteAbc(@graphql.Args() args: DeleteAbcArgs): Promise<Abc | null> {
    try {
      return await this.service.deleteAbc(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Def], { name: "defs" })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  async findDefs(
    @graphql.Parent() parent: Abc,
    @graphql.Args() args: DefFindManyArgs
  ): Promise<Def[]> {
    const results = await this.service.findDefs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Def, {
    nullable: true,
    name: "def",
  })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  async getDef(@graphql.Parent() parent: Abc): Promise<Def | null> {
    const result = await this.service.getDef(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
