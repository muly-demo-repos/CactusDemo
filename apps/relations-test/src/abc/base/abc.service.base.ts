/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Abc as PrismaAbc, Def as PrismaDef } from "@prisma/client";

export class AbcServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.AbcCountArgs, "select">): Promise<number> {
    return this.prisma.abc.count(args);
  }

  async abcs(args: Prisma.AbcFindManyArgs): Promise<PrismaAbc[]> {
    return this.prisma.abc.findMany(args);
  }
  async abc(args: Prisma.AbcFindUniqueArgs): Promise<PrismaAbc | null> {
    return this.prisma.abc.findUnique(args);
  }
  async createAbc(args: Prisma.AbcCreateArgs): Promise<PrismaAbc> {
    return this.prisma.abc.create(args);
  }
  async updateAbc(args: Prisma.AbcUpdateArgs): Promise<PrismaAbc> {
    return this.prisma.abc.update(args);
  }
  async deleteAbc(args: Prisma.AbcDeleteArgs): Promise<PrismaAbc> {
    return this.prisma.abc.delete(args);
  }

  async findDefs(
    parentId: string,
    args: Prisma.DefFindManyArgs
  ): Promise<PrismaDef[]> {
    return this.prisma.abc
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .defs(args);
  }

  async getDef(parentId: string): Promise<PrismaDef | null> {
    return this.prisma.abc
      .findUnique({
        where: { id: parentId },
      })
      .def();
  }
}
