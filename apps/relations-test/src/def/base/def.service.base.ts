/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Def as PrismaDef, Abc as PrismaAbc } from "@prisma/client";

export class DefServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DefCountArgs, "select">): Promise<number> {
    return this.prisma.def.count(args);
  }

  async defs(args: Prisma.DefFindManyArgs): Promise<PrismaDef[]> {
    return this.prisma.def.findMany(args);
  }
  async def(args: Prisma.DefFindUniqueArgs): Promise<PrismaDef | null> {
    return this.prisma.def.findUnique(args);
  }
  async createDef(args: Prisma.DefCreateArgs): Promise<PrismaDef> {
    return this.prisma.def.create(args);
  }
  async updateDef(args: Prisma.DefUpdateArgs): Promise<PrismaDef> {
    return this.prisma.def.update(args);
  }
  async deleteDef(args: Prisma.DefDeleteArgs): Promise<PrismaDef> {
    return this.prisma.def.delete(args);
  }

  async findAbcs(
    parentId: string,
    args: Prisma.AbcFindManyArgs
  ): Promise<PrismaAbc[]> {
    return this.prisma.def
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .abcs(args);
  }

  async getAbc(parentId: string): Promise<PrismaAbc | null> {
    return this.prisma.def
      .findUnique({
        where: { id: parentId },
      })
      .abc();
  }
}
