/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { DefService } from "../def.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { DefCreateInput } from "./DefCreateInput";
import { Def } from "./Def";
import { DefFindManyArgs } from "./DefFindManyArgs";
import { DefWhereUniqueInput } from "./DefWhereUniqueInput";
import { DefUpdateInput } from "./DefUpdateInput";
import { AbcFindManyArgs } from "../../abc/base/AbcFindManyArgs";
import { Abc } from "../../abc/base/Abc";
import { AbcWhereUniqueInput } from "../../abc/base/AbcWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class DefControllerBase {
  constructor(
    protected readonly service: DefService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Def })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createDef(@common.Body() data: DefCreateInput): Promise<Def> {
    return await this.service.createDef({
      data: {
        ...data,

        abc: data.abc
          ? {
              connect: data.abc,
            }
          : undefined,
      },
      select: {
        abc: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Def] })
  @ApiNestedQuery(DefFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async defs(@common.Req() request: Request): Promise<Def[]> {
    const args = plainToClass(DefFindManyArgs, request.query);
    return this.service.defs({
      ...args,
      select: {
        abc: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Def })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async def(@common.Param() params: DefWhereUniqueInput): Promise<Def | null> {
    const result = await this.service.def({
      where: params,
      select: {
        abc: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Def })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateDef(
    @common.Param() params: DefWhereUniqueInput,
    @common.Body() data: DefUpdateInput
  ): Promise<Def | null> {
    try {
      return await this.service.updateDef({
        where: params,
        data: {
          ...data,

          abc: data.abc
            ? {
                connect: data.abc,
              }
            : undefined,
        },
        select: {
          abc: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Def })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteDef(
    @common.Param() params: DefWhereUniqueInput
  ): Promise<Def | null> {
    try {
      return await this.service.deleteDef({
        where: params,
        select: {
          abc: {
            select: {
              id: true,
            },
          },

          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/abcs")
  @ApiNestedQuery(AbcFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  async findAbcs(
    @common.Req() request: Request,
    @common.Param() params: DefWhereUniqueInput
  ): Promise<Abc[]> {
    const query = plainToClass(AbcFindManyArgs, request.query);
    const results = await this.service.findAbcs(params.id, {
      ...query,
      select: {
        createdAt: true,

        def: {
          select: {
            id: true,
          },
        },

        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/abcs")
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "update",
    possession: "any",
  })
  async connectAbcs(
    @common.Param() params: DefWhereUniqueInput,
    @common.Body() body: AbcWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abcs: {
        connect: body,
      },
    };
    await this.service.updateDef({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/abcs")
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "update",
    possession: "any",
  })
  async updateAbcs(
    @common.Param() params: DefWhereUniqueInput,
    @common.Body() body: AbcWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abcs: {
        set: body,
      },
    };
    await this.service.updateDef({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/abcs")
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "update",
    possession: "any",
  })
  async disconnectAbcs(
    @common.Param() params: DefWhereUniqueInput,
    @common.Body() body: AbcWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      abcs: {
        disconnect: body,
      },
    };
    await this.service.updateDef({
      where: params,
      data,
      select: { id: true },
    });
  }
}
