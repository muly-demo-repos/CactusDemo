/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Def } from "./Def";
import { DefCountArgs } from "./DefCountArgs";
import { DefFindManyArgs } from "./DefFindManyArgs";
import { DefFindUniqueArgs } from "./DefFindUniqueArgs";
import { CreateDefArgs } from "./CreateDefArgs";
import { UpdateDefArgs } from "./UpdateDefArgs";
import { DeleteDefArgs } from "./DeleteDefArgs";
import { AbcFindManyArgs } from "../../abc/base/AbcFindManyArgs";
import { Abc } from "../../abc/base/Abc";
import { DefService } from "../def.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Def)
export class DefResolverBase {
  constructor(
    protected readonly service: DefService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  async _defsMeta(
    @graphql.Args() args: DefCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Def])
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "any",
  })
  async defs(@graphql.Args() args: DefFindManyArgs): Promise<Def[]> {
    return this.service.defs(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Def, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "read",
    possession: "own",
  })
  async def(@graphql.Args() args: DefFindUniqueArgs): Promise<Def | null> {
    const result = await this.service.def(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Def)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "create",
    possession: "any",
  })
  async createDef(@graphql.Args() args: CreateDefArgs): Promise<Def> {
    return await this.service.createDef({
      ...args,
      data: {
        ...args.data,

        abc: args.data.abc
          ? {
              connect: args.data.abc,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Def)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "update",
    possession: "any",
  })
  async updateDef(@graphql.Args() args: UpdateDefArgs): Promise<Def | null> {
    try {
      return await this.service.updateDef({
        ...args,
        data: {
          ...args.data,

          abc: args.data.abc
            ? {
                connect: args.data.abc,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Def)
  @nestAccessControl.UseRoles({
    resource: "Def",
    action: "delete",
    possession: "any",
  })
  async deleteDef(@graphql.Args() args: DeleteDefArgs): Promise<Def | null> {
    try {
      return await this.service.deleteDef(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Abc], { name: "abcs" })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  async findAbcs(
    @graphql.Parent() parent: Def,
    @graphql.Args() args: AbcFindManyArgs
  ): Promise<Abc[]> {
    const results = await this.service.findAbcs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Abc, {
    nullable: true,
    name: "abc",
  })
  @nestAccessControl.UseRoles({
    resource: "Abc",
    action: "read",
    possession: "any",
  })
  async getAbc(@graphql.Parent() parent: Def): Promise<Abc | null> {
    const result = await this.service.getAbc(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
