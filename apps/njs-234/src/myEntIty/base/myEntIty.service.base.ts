/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MyEntIty as PrismaMyEntIty } from "@prisma/client";

export class MyEntItyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MyEntItyCountArgs, "select">): Promise<number> {
    return this.prisma.myEntIty.count(args);
  }

  async myEntIties(
    args: Prisma.MyEntItyFindManyArgs
  ): Promise<PrismaMyEntIty[]> {
    return this.prisma.myEntIty.findMany(args);
  }
  async myEntIty(
    args: Prisma.MyEntItyFindUniqueArgs
  ): Promise<PrismaMyEntIty | null> {
    return this.prisma.myEntIty.findUnique(args);
  }
  async createMyEntIty(
    args: Prisma.MyEntItyCreateArgs
  ): Promise<PrismaMyEntIty> {
    return this.prisma.myEntIty.create(args);
  }
  async updateMyEntIty(
    args: Prisma.MyEntItyUpdateArgs
  ): Promise<PrismaMyEntIty> {
    return this.prisma.myEntIty.update(args);
  }
  async deleteMyEntIty(
    args: Prisma.MyEntItyDeleteArgs
  ): Promise<PrismaMyEntIty> {
    return this.prisma.myEntIty.delete(args);
  }
}
