/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { MyEntIty } from "./MyEntIty";
import { MyEntItyCountArgs } from "./MyEntItyCountArgs";
import { MyEntItyFindManyArgs } from "./MyEntItyFindManyArgs";
import { MyEntItyFindUniqueArgs } from "./MyEntItyFindUniqueArgs";
import { CreateMyEntItyArgs } from "./CreateMyEntItyArgs";
import { UpdateMyEntItyArgs } from "./UpdateMyEntItyArgs";
import { DeleteMyEntItyArgs } from "./DeleteMyEntItyArgs";
import { MyEntItyService } from "../myEntIty.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => MyEntIty)
export class MyEntItyResolverBase {
  constructor(
    protected readonly service: MyEntItyService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "read",
    possession: "any",
  })
  async _myEntItiesMeta(
    @graphql.Args() args: MyEntItyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [MyEntIty])
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "read",
    possession: "any",
  })
  async myEntIties(
    @graphql.Args() args: MyEntItyFindManyArgs
  ): Promise<MyEntIty[]> {
    return this.service.myEntIties(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => MyEntIty, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "read",
    possession: "own",
  })
  async myEntIty(
    @graphql.Args() args: MyEntItyFindUniqueArgs
  ): Promise<MyEntIty | null> {
    const result = await this.service.myEntIty(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MyEntIty)
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "create",
    possession: "any",
  })
  async createMyEntIty(
    @graphql.Args() args: CreateMyEntItyArgs
  ): Promise<MyEntIty> {
    return await this.service.createMyEntIty({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => MyEntIty)
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "update",
    possession: "any",
  })
  async updateMyEntIty(
    @graphql.Args() args: UpdateMyEntItyArgs
  ): Promise<MyEntIty | null> {
    try {
      return await this.service.updateMyEntIty({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MyEntIty)
  @nestAccessControl.UseRoles({
    resource: "MyEntIty",
    action: "delete",
    possession: "any",
  })
  async deleteMyEntIty(
    @graphql.Args() args: DeleteMyEntItyArgs
  ): Promise<MyEntIty | null> {
    try {
      return await this.service.deleteMyEntIty(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
